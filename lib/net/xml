| xml parser
| vim: ft=reva: 

push~

needs string/regex

context: ~xml

~priv
: c!++ ( a c -- a' ) over c! 1+ ;
: pushxml ( a a' n -- a'' )
	bounds do
		i c@ c!++
	loop
	;
" (?is)<([^<]+)>(.*?)</\\1>" regex: rx-xml-tag
" <([^<]+) />" regex: rx-xml-emptytag

~xml
: escapechar-count ( a n -- )
	0 -rot
	bounds do
		i c@ case
			'< of 1+ endof
			'> of 1+ endof
			'& of 1+ endof
			drop
		endcase
	loop
	;
: escape ( a n -- a' n' )
	2dup escapechar-count
	over + 1+
	allocate dup >r		| a n a' r:a'
	-rot bounds do
		i c@ 
		case
			'< of " &lt;" pushxml endof
			'> of " &gt;" pushxml endof
			'& of " &amp;" pushxml endof
			c!++
		endcase
	loop
	r> swap over -
	;

: parse ( xt a n -- )
	rot >r 2dup									
	| a n a n r:xt
	rx-xml-tag regex_find 0if 
		2dup rx-xml-emptytag regex_find 0if
			2drop 2drop rdrop 
		;then
		0L 1 regex_getmatch r@ execute
		2drop 2drop rdrop
	;then
	| deal with this match
	2 regex_getmatch 1 regex_getmatch r@ execute

	| There is a <tag>value</tag> item.  Split the string into parts; pass this
	| tag,value pair to the xt, and pass the tail to parse again
	| a n a' n'
	2dup r@ 2 regex_getmatch parse
	| a n a' n' -- do the math to get the tail:
	+ third -
	strbreakat 2nip r> -rot parse
	;


pop~

|||


def: escape
stack: a n -- a n
ctx: ~xml
ver: 7.0.5
desc: *
	Allocates a new string, which is a copy of the one passed in - except all
	"<" and "&" characters are converted to "&lt;" and "&amp;".
*
def: parse
stack: xt a n --
ctx: ~xml
ver: 7.0.5
desc: *
	Regex-based parser of XML strings.  Parses (a,n) and calls "xt" for each
	(key,value) pair found in the input.

	The xt is called with a stack like ( value valueN key keyN -- )
*

related: escape parse
