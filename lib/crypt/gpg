| vim: ft=reva :
| GPG interface library (actually, interface to GPGME)

MAC [IF] " gpgme" nolib [THEN]

push~
~ context: ~gpg
~gpg
context: ~gpgme
~gpgme

os [IF] " libgpgme.so" [ELSE] " libgpgme-11.dll" [THEN] lib gpgme
| attributes
1 constant GPGME_ATTR_KEYID
8 constant GPGME_ATTR_USERID
9 constant GPGME_ATTR_NAME
10 constant GPGME_ATTR_EMAIL
15 constant GPGME_ATTR_IS_SECRET

| possible encoding modes:
0 constant NONE
1 constant BINARY
2 constant BASE64
3 constant ARMOR
| public key algorithms
1 constant RSA
2 constant RSA_E
3 constant RSA_S
16 constant ELG_E
17 constant DSA
20 constant ELG
| hash algorithms
1 constant MD5
2 constant SHA1
3 constant RMD160
5 constant MD2
6 constant TIGER
7 constant HAVAL
8 constant SHA256
9 constant SHA384
10 constant SHA512
301 constant MD4
302 constant CRC32
303 constant CRC32_RFC1510
304 constant CRC24_RFC2440
| signature states
1 constant SIG_GOOD
2 constant SIG_BAD
3 constant SIG_NOKEY
4 constant SIG_NOSIG
5 constant SIG_ERROR
6 constant SIG_DIFF
7 constant SIG_GOOD_EXP
8 constant SIG_GOOD_EXPKEY
| signature modes
0 constant NORMAL
1 constant DETACH
2 constant CLEAR
| trust attributes
0 constant UNKNOWN
1 constant UNDEFINED
2 constant NEVER
3 constant MARGINAL
4 constant FULL
5 constant ULTIMATE

16383 constant GPG_ERR_EOF
55 constant GPG_ERR_INV_VALUE

variable gpgme_error_code
1 func: gpgme_check_version | ( const char * req_version)
1 func: gpgme_new | (gpgme_ctx *ctx)
1 vfunc: gpgme_release | ( ctx )
2 vfunc: gpgme_set_armor  | ( ctx, yesno) 
1 func: gpgme_get_armor ( ctx -- yesno )
2 vfunc: gpgme_set_textmode ( ctx, yesno )
1 func: gpgme_get_textmode ( ctx -- yesno )

3 func: gpgme_op_keylist_start ( ctx pattern sec_only -- err )
2 func: gpgme_op_keylist_next ( gpgme_ctx_t ctx, gpgme_key_t *r_key )
1 func: gpgme_op_keylist_end ( gpgme_ctx_t ctx )
4 func: gpgme_get_key ( gpgme_ctx_t ctx, const char *fpr, gpgme_key_t *r_key, int secret)
1 vfunc: gpgme_key_release ( key )

4 func: gpgme_key_get_string_attr ( key, what, reserved, idx )

: gpgme_version ( -- a n ) 0 gpgme_check_version zcount ;

~gpg
: init-gpg ( -- ctx ) 
	gpgme_error_code off
	gpgme_version nip 0if false ;then
	0 sp gpgme_new gpgme_error_code !
	;
: done-gpg ( ctx -- ) gpgme_release  ;

variable thekey

: last-key ( ctx -- ) gpgme_op_keylist_end drop ;

: iterate-keys ( ctx pat,n secret xt -- )
	>r					| save the xt
	>r zt r>			| ctx pz sec	
	__dup				| ctx ctx pz sec
	gpgme_op_keylist_start	| ctx err
	if drop rdrop ;then
	| valid keys exist, apparently.  iterate:
	repeat
		dup thekey gpgme_op_keylist_next not
		dup if
			thekey @ r@ execute
			thekey @ gpgme_key_release
		then
	while
	rdrop
	;

: getkey ( ctx a n sec -- key ) 
	>r zt thekey r> gpgme_get_key if 0 ;then
	thekey @
	;

: key>attr ( key attr -- a n ) 0 0 gpgme_key_get_string_attr zcount ;
: key>id ( key -- a n ) GPGME_ATTR_KEYID key>attr ;
: key>uid ( key -- a n ) GPGME_ATTR_USERID key>attr ;
: key>name ( key -- a n ) GPGME_ATTR_NAME key>attr ;
: key>email ( key -- a n ) GPGME_ATTR_EMAIL key>attr ;
: key>secret ( key -- a n ) GPGME_ATTR_IS_SECRET key>attr ;

pop~


|||

def: init-gpg
stack: -- ctx
ver: 2011.1
ctx: ~gpg
desc: =
	Initialize the 'gpgme' library and return a 'ctx', which is used for further
	activities.

	If 'ctx' is zero, there was a problem.
=
