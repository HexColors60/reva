| vim:  ft=reva :
| implementation of double-cell words

push~
~util ~priv ~io ~doubles
: doubles #8 * ;
: s>d [ $04ee8399 , $d0890689 , ; | cdq; sub esi,4; mov [esi], eax; mov eax,edx
: d+  inline{ 89 c1 ad 89 c2 ad 01 16 11 c8 } ;
: d-  inline{ 89 c1 ad 89 c2 ad 29 16 19 c8 } ;
: m+ s>d d+ ;
: d= d- or not ;
: dnegate [ $1ef7d0f7 , $ffd883 3, ;
: dabs dup 0 <if dnegate then ;
: d2/ inline{ D1 F8 D1 3E } ;
: d2* inline{ D1 26 D1 D0 } ;
| : d+! ( d a -- ) tuck cell+ +! +! ;
: d+! inline{ 89 C3 AD 01 43 04 AD 01 03 AD } ;

| mov ecx, eax
| lodsd
| mov edx, eax
| xor eax, ecx
| lodsd
| jns .1
| idiv ecx
| test edx, edx
| jz .2
| add edx, ecx
| dec eax
| jmp .2
| .1: 
| idiv ecx
| .2:
| lea esi, [esi-4]
| mov [esi], edx
: fm/mod ( d n -- rem div ) 
	[ $89ADC189 , $ADC831C2 , $F9F70B79 , $0774D285 , 
	  $EB48CA01 , $8DF9F702 , $1689FC76 , ;
: m* ( n1 n2 -- d1 ) [ $068bc389 , $0689ebf7 , $d089 2, ;
: um* ( u1 u2 -- ud1 ) [ $068bc389 , $0689e3f7 , $d089 2, ;
: udm* ( ud n -- ud1 )
	| low high n
	>r swap | high low (r:n)
	r@ um* | high d1
	rot | d1 high
	r> um* drop | d1 high
	+
	;

~priv
256 constant PIC-BUF# 
create pic-buf PIC-BUF# allot
variable pic-ix
variable held 
2variable val
variable isnegative
: d# ( d1 -- d2 c )
	base @
	[ $31adc589 , $87f5f7d2 , $87f5f706 , $fc768d06 , $d0890689 , ]
	>digit
	;
exit~
: <# ( d -- )
	dup $8000000 and isnegative !
	dabs
	val 2!
	held off 
	PIC-BUF# pic-ix ! ;

: d< ( d1 d2 -- f ) d- drop 0 < ;

: #> ( -- a n )
	pic-ix @
	dup pic-buf + swap
	PIC-BUF# swap -
	;

: # ( -- )
	0 held xchg
	dup 0if
		drop
		val 2@ d# 
		>r val 2! r>
	then
	pic-ix --
	pic-ix @
	dup 0if
		| protect against buffer under-run
		pic-ix ++
		drop
	;then

	pic-buf + c!
	;

: #s ( -- )
	#
	val 2@ 0L d= if ;then
	#s
	;

: hold ( c -- )
	held ! # ;
: sign isnegative @ 0; drop '- hold ;

: (d.) ( d -- a n ) <# #s sign #> ;
: d. (d.) type space ;

[IFTEST]
with~ ~doubles
test: dbl 1
	0L 0L d= ;
test: dbl 2
	1L 1L d= ;
test: dbl 3
	-1L -1L d= ;
test: dbl 1a
	0L 1L d= not ;
test: dbl 2a
	-1L 1L d= not ;
test: dbl 3a
	-1L -0L d= not ;
test: dbl 4
	1L 2L d+ 3L d= ;
test: dbl 5
	1L 2L d- -1L d= ;
test: dbl 6
	2L dabs 2L d= ;
test: dbl 7
	-2L dabs 2L d= ;
test: dbl 8
	10L 5 m+ 15L d= ;
test: dbl 9
	10 5 m* 50L d= ;
test: dbl 10
	10 -5 m* -50L d= ;
test: dbl 11
	2 -3 um* 8,589,934,586L d= ;
test: big dbl
	-6 1 8,589,934,586L d=  ;
test: s>d 1
	2 s>d 2L d= ;
test: s>d 2
	-1 s>d -1L d= ;
test: big dbl 2
	99999999999L 23 -  swap 1215752191 - or 0 = ;
	
[THEN]

pop~
|||
def: doubles
stack: n -- m
ctx: ~doubles
desc: @
	Returns number of bytes required by "n" doubles.
@
def: s>d
stack: n -- d
ctx: ~doubles
desc: @
	Converts the single-cell value "n" to a double "d" by sign-extension.
@
def: d+
stack: d1 d2 -- d3
ctx: ~doubles
desc: @
	Adds the doubles "d1" and "d2" to create "d3".
@
def: d-
stack: d1 d2 -- d3
ctx: ~doubles
desc: @
	Subtracts "d2" from "d1" giving "d3"
@
def: m+
stack: d n -- d2
ctx: ~doubles
desc: @
	Adds the single "n" to the double "d" giving "d2"
@
def: d=
stack: d1 d2 -- flag
ctx: ~doubles
desc: @
	Compares the two doubles "d1" and "d2", leaving "true" in TOS if they are
	equal, and "false" otherwise.
@
def: dnegate
stack: d -- -d
ctx: ~doubles
desc: @
	Flips the sign of "d", analagous to "negate"
@
def: dabs
stack: d -- abs(d)
ctx: ~doubles
desc: @
	Gives the absolute value of "d", analagous to "abs"
@
def: fm/mod
stack: d n -- rem div
ctx: ~doubles
desc: @
	Floored modulo of "d" (modulo "n")
@
def: m*
stack: n1 n2 -- d
ctx: ~doubles
desc: @
	Multiplies two singles "n1" and "n2", leaving the double result "d"
@
def: um*
stack: u1 u2 -- ud
ctx: ~doubles
desc: @
	Multiplies two unsigned singles "u1" and "u2", leaving the double unsigned
	result "ud"
@
def: udm*
stack: ud n -- ud1
ctx: ~doubles
desc: @
	Like "um*" only multiplies the unsigned double "ud" by the unsigned "n"
@
def: (d.)
stack: d -- a n
ctx: ~doubles
desc: @
	Like "(.)".  Take a double, and convert it to a string.
@
def: d.
stack: d -- 
ctx: ~doubles
desc: @
	Like ".".  Take a double, and print it followed by a space.
@

def: d2/ 
stack: d1 -- d2
ctx: ~doubles 
ver: 6.1.6
desc: @
	Divide the double "d1" by 2, giving "d2"
@
def: d2* 
stack: d1 -- d2
ctx: ~doubles 
ver: 6.1.6
desc: @
	Multiply the double "d1" by 2, giving "d2"
@

def: d+! 
stack: d a -- 
ctx: ~doubles 
ver: 6.1.13
desc: @
	Add the double 'd' to the double at the address 'a', same as "+!" but
	double width.
@

def: <#
stack: d -- 
ctx: ~doubles 
ver: 9.0.10
desc: @
	Begin "pictured output" of the double on the stack.
@
def: #>
stack: -- a n
ctx: ~doubles 
ver: 9.0.10
desc: @
	End the "pictured output" of the double being processed.  The buffer
	returned is a static one, so subsequent calls to the pictured output
	words will overwrite the buffer.
@
def: #
stack: -- 
ctx: ~doubles 
ver: 9.0.10
desc: @
	Put the least-significant digit of the double being processed into the pictured-output buffer.  Takes 'base' into account.
@
def: #s
stack: -- 
ctx: ~doubles 
ver: 9.0.10
desc: @
	Puts all remaining digits of the double being processed into the
	pictured-output buffer.
@
def: hold
stack: c -- 
ctx: ~doubles 
ver: 9.0.10
desc: @
	Puts the character on TOS into the pictured-output-buffer
@
def: sign
stack:  -- 
ctx: ~doubles 
ver: 9.0.10
desc: @
	If the double being processed is negative, puts a '-' character into the
	output buffer
@
def: d<
stack: d1 d2 -- flag
ctx: ~doubles
ver: 9.0.10
desc: @
	Compares the two doubles "d1" and "d2", leaving "true" in TOS if d1 is less
	than d2, and "false" otherwise.
@

related: <# #> # #s hold . base sign
related: d+ d- d= d< m+ doubles s>d dnegate dabs fm/mod m* um* udm* (d.) d. d+!
related: +! d+!
